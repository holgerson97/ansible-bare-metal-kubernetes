---
- name: docker-runtime
  block:

  - name: Ubuntu/Debian install
    block:

    - name: Add Docker's official GPG Key (Ubuntu/Debian)
      apt_key: url=https://download.docker.com/linux/ubuntu/gpg state=present

    - name: Add Docker's repository (Ubuntu/Debian)
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present
        update_cache: yes

    - name: Install conatiner runtime (Ubuntu/Debian)
      apt: name="{{ item.name }}={{ item.version }}" state=present force=true
      with_items:
        - { name: 'containerd.io', version: "{{ containerd_version }}" }
        - { name: 'docker-ce', version: "{{ ubuntu_docker_version }}" }
        - { name: 'docker-ce-cli', version: "{{ ubuntu_docker_version }}" }

    when: ansible_distribution == "Ubuntu" or ansible_distribution == 'Debian'

  - name: CentOS/RHEL install
    block:

    - name: Add Docker's repository (CentOS/RHEL)
      yum_repository: name=https://download.docker.com/linux/centos/docker-ce.repo state=present

    - name: Install conatiner runtime (CentOS/RHEL)
      yum: name="{{ item.name }}-{{ item.version }}" update_cache=yes
      with_items:
        - { name: 'containerd.io', version: "{{ containerd_version }}" }
        - { name: 'docker-ce', version: "{{ centos_docker_version }}" }
        - { name: 'docker-ce-cli', version: "{{ centos_docker_version }}" }

    when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

  - name: Ensure docker directory exists
    file: path=/etc/docker state=directory

  - name: Create docker daemon
    copy: src=daemon.json dest=/etc/docker/daemon.json owner=root group=root mode=0644
    notify: docker_daemon

  - name: Ensure docker service exists
    file: path=/etc/systemd/system/docker.service.d state=directory
    notify: docker_daemon

  - meta: flush_handlers

  when: docker_runtime

- name: containerd-runtime
  block:
  
  - name: Create containerd.conf
    copy: src={{ item.src }} dest={{ item.dest }} owner=root group=root
    with_items:
      - { src: containerd.conf, dest: /etc/modules-load.d/containerd.conf }
    register: containerd_conf

  - name: Add kernel modules for containerd
    become: yes
    command: "{{ item }}"
    with_items:
    - modprobe overlay
    - modprobe br_netfilter
    when: containerd_conf.changed

  - name: etup required sysctl params
    copy: src={{ item.src }} dest={{ item.dest }} owner=root group=root
    with_items:
      - { src: 99-kubernetes-cri.conf, dest: /etc/sysctl.d/99-kubernetes-cri.conf }
    register: sysctl_params

  - shell: sysctl --system
    become: yes
    when: sysctl_params.changed

  - name: Ubuntu/Debian install
    block:

      - name: Add Docker's official GPG Key (Ubuntu/Debian)
        apt_key: url=https://download.docker.com/linux/ubuntu/gpg state=present

      - name: Add Docker's repository (Ubuntu/Debian)
        apt_repository:
          repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
          state: present
          update_cache: yes

      - name: Install conatiner runtime (Ubuntu/Debian)
        apt: name="{{ item.name }}={{ item.version }}" state=present force=true
        with_items:
          - { name: 'containerd.io', version: "{{ containerd_version }}" }
        register: containerd_service

    when: ansible_distribution == "Ubuntu" or ansible_distribution == 'Debian'

  - name: CentOS/RHEL install
    block:

    - name: Add Docker's repository (CentOS/RHEL)
      yum_repository:
        name: https://download.docker.com/linux/centos/docker-ce.repo
        state: present

    - name: Install conatiner runtime (CentOS/RHEL)
      yum: name="{{ item.name }}-{{ item.version }}" update_cache=yes
      with_items:
        - { name: 'containerd.io', version: "{{ containerd_version }}" }

    when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

  - name: Create containerd config
    become: yes
    copy: src={{ item.src }} dest={{ item.dest }} owner=root group=root
    with_items:
      - { src: config.toml, dest: /etc/containerd/config.toml }
    notify: containerd_daemon
    
  - meta: flush_handlers

  when: containerd_runtime

- name: crio-runtime
  block:

  - name: Create crio.conf
    copy: src={{ item.src }} dest={{ item.dest }} owner=root group=root
    with_items:
      - { src: crio.conf, dest: /etc/modules-load.d/crio.conf }
    register: crio_conf

  - name: Add kernel modules for crio
    become: yes
    command: "{{ item }}"
    with_items:
    - modprobe overlay
    - modprobe br_netfilter
    when: crio_conf.changed

  - name: Setup required sysctl params
    copy: src={{ item.src }} dest={{ item.dest }} owner=root group=root
    with_items:
      - { src: 99-kubernetes-cri.conf, dest: /etc/sysctl.d/99-kubernetes-cri.conf }
    register: sysctl_params

  - shell: sysctl --system
    become: yes
    when: sysctl_params.changed

  - name: Ubuntu/Debian install
    block:

    - name: Ubuntu install
      block:

      - name: Add cri-o repositorys
        become: yes
        apt_repository: repo={{ item.repo }} filename={{ item.repo_file }} state=present update_cache=false 
        with_items:
        - { repo: "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_{{ ansible_distribution_version }}/ /", repo_file: "devel:kubic:libcontainers:stable" }
        - { repo: "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ crio_version }}/xUbuntu_{{ ansible_distribution_version }}/ /", repo_file: "devel:kubic:libcontainers:stable:cri-o:{{ crio_version }}"}

      - name: Add cri-o repository key
        apt_key: url={{ item.key }} keyring={{ item.key_file }}
        with_items:
        - { key: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_{{ ansible_distribution_version }}/Release.key", key_file: "/etc/apt/trusted.gpg.d/libcontainers.gpg" }
        - { key: "https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:{{ crio_version }}/xUbuntu_{{ ansible_distribution_version }}/Release.key", key_file: "/etc/apt/trusted.gpg.d/libcontainers-cri-o.gpg" }

      when: ansible_distribution == "Ubuntu"

    - name: Debian install
      block:

      - name: Add cri-o repositorys
        apt_repository: repo={{ item.repo }} state=present update_cache=false
        with_items:
        - { repo: "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ ansible_distribution_version }}/ /", repo_file: "/etc/apt/sources.list.d/devel:kubic:libcontainers:stable" } 
        - { repo: "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ crio_version }}/{{ ansible_distribution_version }}/ /", repo_file: "/etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:{{ crio_version }}" }

      - name: Add cri-o repository key
        apt_key: url={{ item.key }} keyring={{ item.key_file }}
        with_items:
        - { key: "https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:{{ crio_version }}/{{ ansible_distribution_version }}/Release.key", key_file: "/etc/apt/trusted.gpg.d/libcontainers.gpg" }
        - { key: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ ansible_distribution_version }}/Release.key", key_file: "/etc/apt/trusted.gpg.d/libcontainers.gpg" }
        when: repos_status.changed

      when: ansible_distribution == "Debian"

    - name: Install cri-o und cri-o-runc
      apt: name={{ item.name }} state=present force=true update_cache=yes
      with_items:
        - { name: 'cri-o'}
        - { name: 'cri-o-runc'}
      notify: crio_daemon
  
    when: ansible_distribution == "Ubuntu" or ansible_distribution == 'Debian'

  - name: CentOS/RHEL install
    block:

    - name: Add repositorys
      yum_repository: baseurl={{ item.repo }}  file={{ item.repo_file }}
      with_items:
      - { repo: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/CentOS_{{ ansible_distribution_version }}/devel:kubic:libcontainers:stable.repo", repo_file: "/etc/yum.repos.d/devel:kubic:libcontainers:stable" }
      - { repo: "https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:{{ crio_version }}/CentOS_{{ ansible_distribution_version }}/devel:kubic:libcontainers:stable:cri-o:{{ crio_version }}.repo", repo_file: "/etc/yum.repos.d/devel:kubic:libcontainers:stable:cri-o:{{ crio_version }}" }

    - name: Install conatiner runtime
      yum: 
        name: "{{ item.name }}" 
        update_cache: yes
      with_items:
      - { name: 'cri-o' }
      notify: crio_daemon

    when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

  - name: Configure cgroup driver
    copy: src={{ item.src }} dest={{ item.dest }} owner=root group=root
    with_items:
      - { src: 02-cgroup-manager.conf, dest: /etc/crio/crio.conf.d/02-cgroup-manager.conf }
    notify: crio_daemon

  - meta: flush_handlers
 


  when: crio_runtime